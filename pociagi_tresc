Napisz program, który przetwarza dane o pociągach przejeżdżających
przez pewien posterunek ruchu. Program czyta dane ze standardowego
wejścia. Dane te składają się z występujących kolejno dwóch grup
wierszy, tzn. wiersze  obu rodzajów nie są ze sobą przemieszane.
Wiersz pierwszego rodzaju informuje o przejechaniu pociągu. Wiersz
drugiego rodzaju zawiera polecenie do wykonania.

Wiersz informujący o przejechaniu pociągu zawiera następujące pola:
- kilkucyfrowy numer pociągu,
- datę w formacie dd.mm.rrrr,
- planowy czas przejazdu pociągu w formacie gg.mm,
- opcjonalnie opóźnienie w minutach -- brak tego pola oznacza, że
  pociąg przejechał planowo.

Wiersz z poleceniem zawiera następujące pola:
- kod polecenia -- wielka litera L, M lub S,
- początek przedziału czasu T_p w formacie gg.mm,
- koniec przedziału czasu T_k w formacie gg.mm.

Pola wierszy są oddzielane co najmniej jednym białym znakiem. Białe
znaki mogą występować również na początku i na końcu wiersza.

Wykonanie polecenia L polega na wypisaniu na standardowe wyjście
jednego wiersza zawierającego liczbę pociągów, które przejechały
przez posterunek w podanym przedziale czasu.

Wykonanie polecenia M polega na wypisaniu na standardowe wyjście
jednego wiersza zawierającego maksymalne opóźnienie dla pociągów,
które przejechały przez posterunek w podanym przedziale czasu.

Wykonanie polecenia S polega na wypisaniu na standardowe wyjście
jednego wiersza zawierającego sumę czasów opóźnień pociągów, które
przejechały przez posterunek w podanym przedziale czasu.

We wszystkich poleceniach jako czas przejazdu pociągu należy przyjąć
jego rzeczywisty czas przejazdu, uwzględniający opóźnienie. Czas T
znajduje się w podanym przedziale, jeśli T_p <= T <= T_k.

Dla każdego polecenia wypisywany wiersz powinien zawierać tylko
stosowną wartość i powinien być zakończony znakiem przejścia do
kolejnego wiersza.

Program musi być odporny na niezgodność formatu danych wejściowych ze
specyfikacją i na bezsensowne dane wejściowe. Dla każdego błędnego
wiersza program powinien wypisać na standardowe wyjście błędów
komunikat w formacie:

Error N: WIERSZ

gdzie N jest numerem błędnego wiersza (wiersze numerujemy od 1),
a WIERSZ to oryginalna postać błędnego wiersza. Spacja po dwukropku
jest istotna. Komunikat powinien być zakończony znakiem przejścia do
kolejnego wiersza. Niepoprawne wiersze w danych wejściowych nie są
dalej przetwarzane.

Na przykład dla danych wejściowych:

123 3.1.2013 3.45
124 30.11.2013 23.59
543 29.02.2013 15.00
545 28.02.2013 15.0
21345 02.09.2013 4.15 5
21346 04.09.2013 6.30
L 0.00 23.59
L 3.45 4.14
M 00.00 12.00
M 12.01 23.39
S 0.00 4.20
S 4.21 23.59

program powinien wypisać na standardowe wyjście:

4
1
5
0
5
0

a na standardowe wyjście błędów:

Error 3: 543 29.02.2013 15.00
Error 4: 545 28.02.2013 15.0

Oczekiwane rozwiązanie nie powinno zawierać definicji własnych
struktur ani klas. Zamiast tego należy korzystać z kontenerów
i algorytmów dostarczanych przez standardową bibliotekę języka C++.
Należy przyjąć, że zwykle dla jednego zbioru danych wejściowych będzie
wykonywanych wiele poleceń. Dlatego ich implementacja powinna być dość
efektywna. Jeśli n jest liczbą wszystkich pociągów, a m liczbą
pociągów wpadających w podany przedział czasu, to polecenia powinny
wykonywać się w następujących czasach:
- L -- O(log n),
- M -- O(m + log n),
- S -- O(m + log n).
Dopuszcza się, aby pierwsze polecenie lub wstępne przetwarzanie danych
trwało O(n log n).

Rozwiązanie będzie kompilowane za pomocą polecenia g++ na maszynie
students z ustawionymi m.in. opcjami -O2 i -Wall. Kompilator nie
powinien wypisywać żadnych ostrzeżeń.

Rozwiązanie należy umieścić w pliku pociagi.cc, który należy umieścić
w repozytorium w katalogu

grupaN/zadanie1/ab123456+cd123456

lub

grupaN/zadanie1/ab123456+cd123456+ef123456

gdzie N jest numerem grupy, a ab123456, cd123456, ef123456 są
identyfikatorami członków zespołu umieszczającego to rozwiązanie.
Katalog z rozwiązaniem nie powinien zawierać innych plików, ale może
zawierać podkatalog private, gdzie można umieszczać różne pliki, np.
swoje testy. Pliki umieszczone podkatalogu private nie będą oceniane.
